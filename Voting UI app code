# Voting UI app code 
Created using Lovable.dev

src/main.tsx


import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
src/App.tsx


import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ThemeProvider } from "next-themes";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <ThemeProvider defaultTheme="dark" attribute="class">
      <TooltipProvider>
        <Toaster />
        <Sonner position="top-center" closeButton />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Index />} />
            {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </ThemeProvider>
  </QueryClientProvider>
);

export default App;
src/pages/Index.tsx


import React, { useState, useEffect } from 'react';
import { toast } from "sonner";
import { useTheme } from "next-themes";
import { Sun, Moon } from "lucide-react";
import UserMenu from '@/components/UserMenu';
import VoteFilter from '@/components/VoteFilter';
import VoteChart from '@/components/VoteChart';
import VoteStats from '@/components/VoteStats';
import VoteAlert from '@/components/VoteAlert';
import VoteQuestion from '@/components/VoteQuestion';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion';

// Sample questions data - More realistic for a voting app
const sampleQuestions = [
  "Will Team A win by more than 10 points in tonight's match?",
  "Is Player X likely to score a hat-trick in the upcoming tournament?",
  "Will the match end with a total score higher than 150 points?",
  "Is Team B going to qualify for the playoffs this season?",
  "Will the underdog team upset the current champions?",
  "Is Player Y going to announce retirement after this season?",
  "Will the upcoming derby match end in a draw?",
  "Is the rookie player going to win Rookie of the Year?"
];

// Generate chart data based on filter
const generateChartData = (filter: string) => {
  const today = new Date();
  let data = [];
  
  if (filter === 'last10') {
    // Last 10 days data
    data = Array.from({ length: 10 }, (_, i) => {
      const day = new Date(today);
      day.setDate(today.getDate() - (9 - i));
      return {
        day: ['S', 'M', 'T', 'W', 'Th', 'F', 'Sa'][day.getDay()],
        votes: Math.floor(Math.random() * 60) + 5 + (i === 9 ? 30 : 0), // Today gets more votes
        fullDate: day.toLocaleDateString()
      };
    });
  } else if (filter === 'last30') {
    // Last 30 days data, but we'll just show 7 data points
    data = Array.from({ length: 7 }, (_, i) => {
      return {
        day: `W${i+1}`,
        votes: Math.floor(Math.random() * 100) + 20,
        fullDate: `Week ${i+1}`
      };
    });
  } else {
    // All time - months data
    data = Array.from({ length: 7 }, (_, i) => {
      const month = new Date(today);
      month.setMonth(today.getMonth() - (6 - i));
      return {
        day: month.toLocaleDateString(undefined, { month: 'short' }),
        votes: Math.floor(Math.random() * 200) + 50,
        fullDate: month.toLocaleDateString(undefined, { year: 'numeric', month: 'long' })
      };
    });
  }
  
  return data;
};

const Index = () => {
  const { theme, setTheme } = useTheme();
  const [activeFilter, setActiveFilter] = useState('last10');
  const [chartData, setChartData] = useState(generateChartData('last10'));
  const [votesEarned, setVotesEarned] = useState(1412.51);
  const [timeRemaining, setTimeRemaining] = useState('23h 57m');
  const [questions, setQuestions] = useState([
    { id: "q1", question: sampleQuestions[0] },
    { id: "q2", question: sampleQuestions[1] }
  ]);
  const [reclaimedVotes, setReclaimedVotes] = useState(0);
  const [isReclaimed, setIsReclaimed] = useState(false);

  // Update chart data when filter changes
  useEffect(() => {
    setChartData(generateChartData(activeFilter));
  }, [activeFilter]);

  const handleFilterChange = (filter: string) => {
    setActiveFilter(filter);
    toast.info(`Showing votes for ${filter === 'last10' ? 'last 10 days' : filter === 'last30' ? 'last 30 days' : 'all time'}`);
  };

  const handleReclaimVotes = () => {
    if (votesEarned === 0) return;
    
    const amountToReclaim = votesEarned;
    setReclaimedVotes(amountToReclaim);
    setVotesEarned(0);
    setIsReclaimed(true);
    
    toast.success(`Successfully reclaimed ${amountToReclaim.toFixed(2)} votes!`);
  };

  const handleCommit = (questionId: string) => {
    // Remove the answered question from the state
    setQuestions(current => current.filter(q => q.id !== questionId));
    addNewQuestion();
    toast.success("Vote committed successfully!");
  };

  const handleUnclear = (questionId: string) => {
    // Remove the answered question from the state
    setQuestions(current => current.filter(q => q.id !== questionId));
    addNewQuestion();
    toast.info("Marked as unclear");
  };

  const addNewQuestion = () => {
    // Only add a new question if we have less than 4 to prevent too many questions
    if (questions.length < 4) {
      // Get a random question that isn't already used
      const usedIndices = questions.map(q => sampleQuestions.findIndex(sq => sq === q.question));
      const availableIndices = [...Array(sampleQuestions.length).keys()]
        .filter(i => !usedIndices.includes(i));
      
      if (availableIndices.length > 0) {
        const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
        const newQuestion = {
          id: `q${Date.now()}`, // Using timestamp to ensure unique IDs
          question: sampleQuestions[randomIndex]
        };
        
        setQuestions(prev => [...prev, newQuestion]);
      }
    }
  };

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  return (
    <motion.div 
      className="min-h-screen bg-gradient-to-br from-blue-50/80 via-purple-50/30 to-pink-50/50 dark:from-gray-900 dark:via-blue-900/20 dark:to-purple-900/30 transition-colors duration-500"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <UserMenu />
      
      <div className="max-w-md mx-auto p-4 pt-12 pb-16">
        <motion.div 
          className="flex justify-between items-center mb-6"
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.1, duration: 0.5 }}
        >
          <h1 className="text-3xl font-bold text-center text-gray-800 dark:text-gray-200">Voting</h1>
          <Button 
            variant="ghost" 
            size="icon"
            onClick={toggleTheme}
            className="rounded-full size-8 p-1"
          >
            {theme === 'dark' ? 
              <Sun className="h-4 w-4" /> : 
              <Moon className="h-4 w-4" />
            }
          </Button>
        </motion.div>
        
        {/* Filter buttons */}
        <VoteFilter activeFilter={activeFilter} onFilterChange={handleFilterChange} />
        
        {/* Chart */}
        <VoteChart data={chartData} />
        
        {/* Stats */}
        <VoteStats votesEarned={votesEarned} onReclaimVotes={handleReclaimVotes} />
        
        {/* Alert */}
        <VoteAlert 
          timeRemaining={timeRemaining} 
          reclaimedVotes={reclaimedVotes}
          isReclaimed={isReclaimed}
        />
        
        {/* Questions - rendered dynamically with animations */}
        <AnimatePresence mode="popLayout">
          <div className="space-y-4">
            {questions.map((q) => (
              <VoteQuestion 
                key={q.id}
                id={q.id}
                question={q.question}
                onCommit={handleCommit}
                onUnclear={handleUnclear}
              />
            ))}
          </div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
};

export default Index;
src/components/UserMenu.tsx


import React from 'react';
import { Menu, User, Settings, Vote, LogOut } from 'lucide-react';
import { 
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";

const UserMenu = () => {
  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="absolute top-4 left-4 z-10">
          <Menu className="h-5 w-5" />
          <span className="sr-only">Toggle menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="w-[250px]">
        <SheetHeader>
          <SheetTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            <span>User Profile</span>
          </SheetTitle>
        </SheetHeader>
        <div className="py-6 space-y-6">
          <div className="px-2 py-4 rounded-lg bg-background/50 backdrop-blur-sm border">
            <div className="text-center">
              <div className="h-16 w-16 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 mx-auto mb-2 flex items-center justify-center text-white text-xl font-bold">
                JS
              </div>
              <h3 className="font-medium">John Smith</h3>
              <p className="text-sm text-muted-foreground">john.smith@example.com</p>
            </div>
          </div>
          
          <nav className="space-y-1">
            <Button variant="ghost" className="w-full justify-start">
              <User className="mr-2 h-4 w-4" />
              Profile
            </Button>
            <Button variant="ghost" className="w-full justify-start">
              <Settings className="mr-2 h-4 w-4" />
              Settings
            </Button>
            <Button variant="ghost" className="w-full justify-start">
              <Vote className="mr-2 h-4 w-4" />
              Voting Preferences
            </Button>
            <Button variant="ghost" className="w-full justify-start text-destructive">
              <LogOut className="mr-2 h-4 w-4" />
              Sign out
            </Button>
          </nav>
        </div>
      </SheetContent>
    </Sheet>
  );
};

export default UserMenu;
src/components/VoteFilter.tsx


import React from 'react';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';

interface VoteFilterProps {
  activeFilter: string;
  onFilterChange: (filter: string) => void;
}

const VoteFilter: React.FC<VoteFilterProps> = ({ activeFilter, onFilterChange }) => {
  const filters = [
    { id: 'last10', label: 'Last 10 votes' },
    { id: 'last30', label: 'Last 30 votes' },
    { id: 'allTime', label: 'All Time' },
  ];

  return (
    <motion.div 
      className="flex space-x-2 mb-4 overflow-x-auto"
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      {filters.map((filter) => (
        <motion.button
          key={filter.id}
          onClick={() => onFilterChange(filter.id)}
          className={cn(
            'px-4 py-2 rounded-full text-sm font-medium transition-colors',
            activeFilter === filter.id
              ? 'bg-vote-blue text-white'
              : 'bg-white text-gray-700 border border-vote-border dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'
          )}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          {filter.label}
        </motion.button>
      ))}
    </motion.div>
  );
};

export default VoteFilter;
src/components/VoteChart.tsx


import React, { useState } from 'react';
import { motion } from 'framer-motion';

interface VoteData {
  day: string;
  votes: number;
}

interface VoteChartProps {
  data: VoteData[];
}

const VoteChart: React.FC<VoteChartProps> = ({ data }) => {
  const [activeDay, setActiveDay] = useState<string>('S'); // Default to Sunday (or current day)
  
  // Find the max value to normalize chart heights
  const maxValue = Math.max(...data.map(item => item.votes), 1);
  
  const handleBarClick = (day: string) => {
    setActiveDay(day);
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm mb-4">
      <div className="flex justify-between items-end h-36">
        {data.map((item, index) => {
          const isActive = item.day === activeDay;
          
          return (
            <motion.div 
              key={index} 
              className="flex flex-col items-center flex-1 cursor-pointer"
              onClick={() => handleBarClick(item.day)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <motion.div 
                className="w-2 rounded-t-md transition-all duration-300" 
                style={{ 
                  height: `${(item.votes / maxValue) * 100}px`,
                  backgroundColor: isActive ? '#0080FF' : 'rgba(238, 238, 238, 0.6)'
                }}
                initial={{ height: 0 }}
                animate={{ height: `${(item.votes / maxValue) * 100}px` }}
                transition={{ duration: 0.5, delay: index * 0.05 }}
              >
              </motion.div>
              <span className="text-xs font-medium mt-2">{item.day}</span>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
};

export default VoteChart;
src/components/VoteStats.tsx


import React, { useState } from 'react';
import { Check } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

interface VoteStatsProps {
  votesEarned: number;
  onReclaimVotes: () => void;
}

const VoteStats: React.FC<VoteStatsProps> = ({ votesEarned, onReclaimVotes }) => {
  const [isReclaiming, setIsReclaiming] = useState(false);
  const [hasReclaimed, setHasReclaimed] = useState(false);
  
  const handleReclaimClick = () => {
    if (hasReclaimed || votesEarned === 0) return;
    
    setIsReclaiming(true);
    
    // After animation completes
    setTimeout(() => {
      setIsReclaiming(false);
      setHasReclaimed(true);
      onReclaimVotes();
    }, 1500);
  };

  return (
    <div className="flex justify-between items-center mb-4">
      <div>
        <p className="text-gray-600 dark:text-gray-400 text-sm">Votes Earned</p>
        <motion.h2 
          key={votesEarned}
          className="text-4xl font-bold" 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          {votesEarned.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
        </motion.h2>
      </div>
      <div className="relative">
        <button 
          onClick={handleReclaimClick}
          disabled={hasReclaimed || isReclaiming || votesEarned === 0}
          className={`relative px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
            hasReclaimed 
              ? 'bg-gray-300 text-gray-600 cursor-not-allowed'
              : isReclaiming 
                ? 'bg-green-500 text-white'
                : 'bg-vote-blue text-white hover:bg-blue-600'
          }`}
        >
          {isReclaiming ? 'Reclaiming...' : 'Re-Claim Votes'}
        </button>
        
        <AnimatePresence>
          {isReclaiming && (
            <motion.div 
              className="absolute inset-0 flex items-center justify-center rounded-full bg-green-500"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 1.2 }}
              transition={{ duration: 0.5 }}
            >
              <Check className="text-white" size={24} />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default VoteStats;
src/components/VoteAlert.tsx


import React from 'react';
import { motion } from 'framer-motion';

interface VoteAlertProps {
  timeRemaining: string;
  reclaimedVotes?: number;
  isReclaimed?: boolean;
}

const VoteAlert: React.FC<VoteAlertProps> = ({ 
  timeRemaining,
  reclaimedVotes = 0,
  isReclaimed = false
}) => {
  return (
    <motion.div 
      className={`p-3 rounded-lg mb-4 text-center transition-colors duration-300 ${
        isReclaimed
          ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
          : 'bg-vote-red text-red-800 dark:bg-red-900/50 dark:text-red-300'
      }`}
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <p>
        {isReclaimed 
          ? `You have reclaimed ${reclaimedVotes.toFixed(2)} votes` 
          : `Commit votes within ${timeRemaining}`}
      </p>
    </motion.div>
  );
};

export default VoteAlert;
src/components/VoteQuestion.tsx


import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { motion } from 'framer-motion';

interface VoteQuestionProps {
  question: string;
  onCommit: (id: string) => void;
  onUnclear: (id: string) => void;
  id: string;
}

const VoteQuestion: React.FC<VoteQuestionProps> = ({ question, onCommit, onUnclear, id }) => {
  const [clickedButtons, setClickedButtons] = useState<{[key: string]: boolean}>({});
  const [answered, setAnswered] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  const handleButtonClick = (action: 'commit' | 'unclear', buttonId: string) => {
    setClickedButtons(prev => ({
      ...prev,
      [buttonId]: true
    }));
    
    // Start animation before removal
    setIsAnimating(true);
    
    // Wait for animation to complete before marking as answered
    setTimeout(() => {
      setAnswered(true);
      
      // Call the appropriate callback with the question ID
      if (action === 'commit') {
        onCommit(id);
      } else {
        onUnclear(id);
      }
    }, 400); // Match the animation duration
  };

  // If the question has been answered, don't render it
  if (answered) {
    return null;
  }

  return (
    <motion.div 
      layout
      className={`bg-white dark:bg-gray-800 border border-vote-border dark:border-gray-700 rounded-lg p-4 mb-4`}
      initial={{ opacity: 0, y: 20 }}
      animate={isAnimating ? { opacity: 0, y: -40 } : { opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -40 }}
      transition={{ duration: 0.4, ease: "easeInOut" }}
    >
      <p className="text-gray-800 dark:text-gray-200 mb-3">{question}</p>
      <div className="grid grid-cols-2 gap-3">
        <Button 
          onClick={() => handleButtonClick('commit', `${id}-commit-1`)}
          variant="outline"
          className={`border border-vote-border dark:border-gray-700 rounded-lg py-2 text-center text-gray-700 dark:text-gray-200 transition-colors ${
            clickedButtons[`${id}-commit-1`] ? 'bg-vote-blue text-white hover:bg-vote-blue dark:bg-vote-blue dark:text-white' : ''
          }`}
        >
          Yes
        </Button>
        <Button 
          onClick={() => handleButtonClick('unclear', `${id}-unclear-1`)}
          variant="outline" 
          className={`border border-vote-border dark:border-gray-700 rounded-lg py-2 text-center text-gray-700 dark:text-gray-200 transition-colors ${
            clickedButtons[`${id}-unclear-1`] ? 'bg-vote-blue text-white hover:bg-vote-blue dark:bg-vote-blue dark:text-white' : ''
          }`}
        >
          No
        </Button>
        <Button 
          onClick={() => handleButtonClick('commit', `${id}-commit-2`)}
          variant="outline"
          className={`border border-vote-border dark:border-gray-700 rounded-lg py-2 text-center text-gray-700 dark:text-gray-200 transition-colors ${
            clickedButtons[`${id}-commit-2`] ? 'bg-vote-blue text-white hover:bg-vote-blue dark:bg-vote-blue dark:text-white' : ''
          }`}
        >
          Maybe
        </Button>
        <Button 
          onClick={() => handleButtonClick('unclear', `${id}-unclear-2`)}
          variant="outline"
          className={`border border-vote-border dark:border-gray-700 rounded-lg py-2 text-center text-gray-700 dark:text-gray-200 transition-colors ${
            clickedButtons[`${id}-unclear-2`] ? 'bg-vote-blue text-white hover:bg-vote-blue dark:bg-vote-blue dark:text-white' : ''
          }`}
        >
          Unclear
        </Button>
      </div>
    </motion.div>
  );
};

export default VoteQuestion;
src/index.css


@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/* Custom styles for the mobile voting app */
@layer components {
  .vote-button-blue {
    @apply bg-vote-blue text-white rounded-full px-4 py-2 font-medium text-sm transition-colors hover:bg-blue-600;
  }

  .vote-button-outline {
    @apply bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 border border-gray-200 dark:border-gray-700 rounded-full px-4 py-2 font-medium text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-700;
  }

  .vote-card {
    @apply bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-sm p-4;
  }
}
src/lib/utils.ts


import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
tailwind.config.ts


import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				vote: {
					blue: '#0080FF',
					red: '#FF9A9A',
					gray: '#F8F8F8',
					border: '#E5E7EB',
					dark: {
						bg: '#222222',
						card: '#333333',
						text: '#F1F1F1'
					}
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'slide-up': {
					from: { 
						transform: 'translateY(0)',
						opacity: '1'
					},
					to: { 
						transform: 'translateY(-20px)',
						opacity: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'slide-up': 'slide-up 0.3s ease-out forwards'
			},
			backgroundImage: {
				'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
